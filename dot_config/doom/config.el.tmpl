;;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Arnaldur"
      user-mail-address "a.arnaldur+emacs@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
(setq doom-font
      (font-spec
       :family "{{ .emacs.font_family }}"
       :size {{ .emacs.font_size }}
       :weight 'normal
       :width 'normal))
        ;; :family "Iosevka"
           ;; :family "Fira Code Medium"
           ;; :family "SpaceMono Nerd Font"
      ;; doom-variable-pitch-font
      ;; (font-spec
      ;;  :family "Fira Sans")
      ;; doom-unicode-font
      ;; (font-spec
      ;;  :family "Source Code Pro")
      ;; doom-big-font
      ;; (font-spec
      ;;  :family "Space Mono Nerd Font Complete Mono Windows Compatible"


;; There Are two ways to load a theme. Both assume the theme is installed and
;; available. You Can Either Set `Doom-Theme' Or Manually Load A Theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'sanityinc-tomorrow-bright)
;; (setq doom-theme 'doom-tomorrow-night)
(setq doom-theme 'ujelly)
;; (setq doom-dracula-brighter-comments t)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; Custom options


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(setq gc-cons-threshold 20000000)
(setq global-undo-tree-mode t)
(setq require-final-newline nil)
(setq confirm-kill-emacs nil)

(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-,")

(map! :n "C-+" #'text-scale-increase
      :n "C--" #'text-scale-decrease
      :n "C-M-+" #'doom/increase-font-size
      :n "C-M--" #'doom/decrease-font-size
      :n "C-M-0" #'doom/reset-font-size

      :n "U" #'evil-redo
      :n "S" #'evil-snipe-s
      :v "s" #'evil-surround-region
      :nvm "H" #'evil-first-non-blank
      :nvm "L" #'evil-end-of-line

      (:after evil-easymotion
       :nm "s" evilem-map)
      (:when (featurep! :completion ivy)
       (:after ivy
        :map ivy-minibuffer-map
        "M-RET" #'ivy-immediate-done)))

(define-key evil-motion-state-map "zJ" #'evil-scroll-line-to-top)
(define-key evil-motion-state-map "zK" #'evil-scroll-line-to-bottom)

;; (map! :i "C-i" #'flyspell-auto-correct-word) WHAT!?
(map! :map doom-leader-code-map
      "c" #'recompile
      "C" #'compile)

(map! :leader
      :desc "M-x"                   "SPC"    #'execute-extended-command
      :desc "Visualize undo tree"   "u"      #'undo-tree-visualize
      (:prefix ("r" . "roam")
       :desc "Open random node"           "a" #'org-roam-node-random
       :desc "Find node"                  "f" #'org-roam-node-find
       :desc "Find ref"                   "F" #'org-roam-ref-find
       :desc "Show graph"                 "g" #'org-roam-graph
       :desc "Insert node"                "i" #'org-roam-node-insert
       :desc "Capture to node"            "n" #'org-roam-capture
       :desc "Toggle roam buffer"         "r" #'org-roam-buffer-toggle
       :desc "Launch roam buffer"         "R" #'org-roam-buffer-display-dedicated
       :desc "Sync database"              "s" #'org-roam-db-sync
       (:prefix ("d" . "by date")
        :desc "Goto previous note"        "b" #'org-roam-dailies-goto-previous-note
        :desc "Goto date"                 "d" #'org-roam-dailies-goto-date
        :desc "Capture date"              "D" #'org-roam-dailies-capture-date
        :desc "Goto next note"            "f" #'org-roam-dailies-goto-next-note
        :desc "Goto tomorrow"             "m" #'org-roam-dailies-goto-tomorrow
        :desc "Capture tomorrow"          "M" #'org-roam-dailies-capture-tomorrow
        :desc "Capture today"             "n" #'org-roam-dailies-capture-today
        :desc "Goto today"                "t" #'org-roam-dailies-goto-today
        :desc "Capture today"             "T" #'org-roam-dailies-capture-today
        :desc "Goto yesterday"            "y" #'org-roam-dailies-goto-yesterday
        :desc "Capture yesterday"         "Y" #'org-roam-dailies-capture-yesterday
        :desc "Find directory"            "-" #'org-roam-dailies-find-directory)))


(after! evil-snipe (evil-snipe-mode -1)
  (setq evil-snipe-scope 'visible))

(after! company
  (map!
   "C-q" #'company-show-doc-buffer))

;; (global-activity-watch-mode)

(setq org-directory "{{ .emacs.org_directory }}")
(setq org-roam-directory "{{ .emacs.org_directory }}/roam")
(setq org-agenda-files (list org-directory "~/vault/org/roam/daily"))

(add-hook! org-mode
 (flyspell-mode-off))

(after! org-journal
  (setq ;; org-journal-file-header "#+TITLE: %Y-%m"
   org-journal-file-type 'monthly
   org-journal-file-format "%Y-%m.org"
   org-journal-dir (concat org-directory "/journal/")
   org-extend-today-until 6
   org-journal-carryover-items nil))

(after! calendar
  ;; Bind this to i in the calendar map
  (defun my/org-roam-capture-calendar (arg &optional event)
    (interactive
     (list current-prefix-arg last-nonmenu-event))
    (org-roam-dailies--capture
     (time-add 86400
               (org-journal--calendar-date->time
                (calendar-cursor-to-date t event)))
     ;; (calendar-cursor-to-date t event)
     arg)))

(after! ispell
  (setq
   ispell-dictionary "en_US"))

(load! "modes/smerge")

(after! latex
  (setq TeX-clean-confirm nil)
  (setq TeX-command-extra-options "-aux-directory=/tmp/latexmk")

  (defun latex/build ()
    (interactive)
    (progn
      (TeX-save-document (TeX-master-file))
      (TeX-command-sequence '("LatexMk"))))
  (map!
   :after latex
   :map LaTeX-mode-map
   :localleader
   :desc "Build"              "b" #'latex/build
   :desc "View"               "v" #'TeX-view
   :desc "Make environment"   "e" #'cdlatex-environment
   :desc "Clean"              "c" #'TeX-clean))

(after! web-mode
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq typescript-indent-level 2)
  (setq web-mode-comment-formats
          '(("java"       . "//")
            ("javascript" . "//")
            ;; ("jsx" . "//")
            ("typescript" . "//")
            ("tsx" . "//")
            ("php"        . "//")
            ("css"        . "//"))))

;; (map!
;;  :map TeX-fold-mode-map
;;  :localleader
;;  :desc "Fold paragraph"   "f"   #'TeX-fold-paragraph
;;  :desc "Unfold paragraph" "F"   #'TeX-fold-clearout-paragraph
;;  :desc "Unfold buffer"    "C-f" #'TeX-fold-clearout-buffer)

(after! lsp-clangd
  (set-lsp-priority! 'clangd 2)
  (setq lsp-clients-clangd-args
        '("-j=3"
          "--background-index"
          "--clang-tidy"
          "--completion-style=detailed"
          "--header-insertion=never")))

(after! ein-notebook
  (map!
   :after ein-notebook
   :map ein:notebook-mode-map
   :ni       "M-j"      #'ein:worksheet-goto-next-input-km
   :ni       "M-k"      #'ein:worksheet-goto-prev-input-km
   :ni       "M-J"    #'ein:worksheet-move-cell-down-km
   :ni       "M-K"    #'ein:worksheet-move-cell-up-km
   :ni       [S-return] #'ein:worksheet-execute-cell-and-goto-next-km
   :ni       [C-return] #'ein:worksheet-execute-cell-km
   :localleader
   :desc "Save notebook"       "s"     #'ein:notebook-save-notebook-command-km
   (:prefix ("c" . "Cell")
    :desc "Insert cell above"        "a"     #'ein:worksheet-insert-cell-above-km
    :desc "Insert cell below"        "b"     #'ein:worksheet-insert-cell-below-km
    :desc "Delete cell"         "d"     #'ein:worksheet-delete-cell
    :desc "Clear cell output"        "l"     #'ein:worksheet-clear-output-km
    :desc "Paste cell"               "p"     #'ein:worksheet-yank-cell-km
    :desc "Copy cell"                "y"     #'ein:worksheet-copy-cell-km
    :desc "Kill cell"                "k"     #'ein:worksheet-kill-cell-km)))


;; (after! bison
;;   (setq bison-decl-token-column 4)
;;   (setq bison-decl-type-column 4)
;;   (setq bison-rule-enumeration-column 4)
;;   (setq bison-rule-separator-column 4))

(after! plantuml-mode
  (map!
   :map plantuml-mode-map
   :localleader
   :desc "Preview"      "b" #'plantuml-preview))
